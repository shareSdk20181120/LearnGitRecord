
忽略特殊文件
	如果我们不想将某些文件放到github中，怎么办呢？
		在git的工作区根目录下创建一个特殊文件.gitignore，然后把要忽略的文件名填进去。git就会忽略这些文件
		你自己定义的文件，最终得到一个完整的.gitignore文件，内容如下：

		# Windows:
		Thumbs.db
		ehthumbs.db
		Desktop.ini		

		# My configurations:
		db.ini
		deploy_key_rsa
		最后将.gitignore文件提交到git，检验.gitignore的标准是git status命令
		
		当你想添加某个文件，发现添加不了，因为这个文件被.gitignore忽略了：
		$git add fileName
		如果你确实想加这个文件，使用-f强制添加到Git
		$git add -f fileName
		如果你赶紧.gitignore写的有问题，需要找出来到底哪个规则写错了，使用git check-ignore检查
		$git check-ignore -v fileName
		
		
		小结：
			忽略某些文件，需要编写.gitignore
			.gitignore文件本身要放到版本库里，并可以对.gitignore做版本管
			
配置别名
	设置status的别名为st,使用如下命令
		$git config --global alias.st status  global是全局参数，也就是这些命令在这台电脑上的所有git库下都有用
	配置一个git last ,让其显示最后一次提交信息
	$git config --global alias.last 'log-1'
	
搭建git服务器
	搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。

	假设你已经有sudo权限的用户账号，下面，正式开始安装。

		第一步，安装git：
			$ sudo apt-get install git
		第二步，创建一个git用户，用来运行git服务：
			$ sudo adduser git
		第三步，创建证书登录：
			收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。
		第四步，初始化Git仓库：
			先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：
			$ sudo git init --bare sample.git
			Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，
			并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：
			$ sudo chown -R git:git sample.git
		第五步，禁用shell登录：
			出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
			git:x:1001:1001:,,,:/home/git:/bin/bash
			改为：
			git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
			这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。

		第六步，克隆远程仓库：

			现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：
			$ git clone git@server:/srv/sample.git
			Cloning into 'sample'...
			warning: You appear to have cloned an empty repository.
			剩下的推送就简单了。
			管理公钥
			如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。

			这里我们不介绍怎么玩Gitosis了，几百号人的团队基本都在500强了，相信找个高水平的Linux管理员问题不大。

			管理权限
			有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。Gitolite就是这个工具。

			这里我们也不介绍Gitolite了，不要把有限的生命浪费到权限斗争中。

	小结
		搭建Git服务器非常简单，通常10分钟即可完成；
		要方便管理公钥，用Gitosis；
		要像SVN那样变态地控制权限，用Gitolite。
